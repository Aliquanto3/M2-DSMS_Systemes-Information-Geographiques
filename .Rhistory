}
pNDraw(5)
#Now we want to reduce the odds of naturally drawing one of them, so we don't
#take the opposite probability anymore, so that it decreases over time
t=5 #the number of kills to vary
phyper(0,m=t,n=60-t,k=1)
dfA=read.csv("Projet/MontpellierA.csv")
summary(dfA)
plot(dfA$Long,dfA$Lat,main="MontpellierA")
Moran(dfA$Long,dfA$Lat,dfA$LDEN,ray=0.05)
Moran(df$Long,df$Lat,df$LDEN,ray=0.05)
library(ape)
Moran.I(df$LDEN,W)
plot(x = noKills, y = pOGaze(noKills))
D=as.matrix(0,n,n)
D
D=as.matrix(rep(0,n*n),n,n)
dim(D)
D
D=matrix(rep(0,n*n),n,n)
D
dim(D)
diag(D)=apply(W,1,sum)
dim(D)
D
diag(D)
Geary = function(X,Y,Z,ray){
n=length(Z)
DD=dist(cbind(X,Y))
M=as.matrix(DD,n,n)
rayon=quantile(DD,ray)
W=M<rayon
diag(W)=0
W=W/sum(W)
Y=(Z-mean(Z))/(sd(Z)*sqrt((n-1)/n))
D=matrix(rep(0,n*n),n,n)
diag(D)=apply(W,1,sum)
t(Y) %*% (D-W) %*% Y
}
Geary(df$Long,df$Lat,df$LDEN,ray=0.05)
?geary
apply(W,1,sum)
Geary = function(X,Y,Z,ray){
n=length(Z)
DD=dist(cbind(X,Y))
M=as.matrix(DD,n,n)
rayon=quantile(DD,ray)
W=M<rayon
D=matrix(rep(0,n*n),n,n)
diag(D)=apply(W,1,sum)
diag(W)=0
W=W/sum(W)
Y=(Z-mean(Z))/(sd(Z)*sqrt((n-1)/n))
t(Y) %*% (D-W) %*% Y
}
n=length(Z)
DD=dist(cbind(X,Y))
Geary(df$Long,df$Lat,df$LDEN,ray=0.05)
X=df$Long
Y=df$Lat
Z=df$LDEN
ray=0.05
n=length(Z)
DD=dist(cbind(X,Y))
M=as.matrix(DD,n,n)
rayon=quantile(DD,ray)
W=M<rayon
D=matrix(rep(0,n*n),n,n)
apply(W,1,sum)
diag(D)=apply(W,1,sum)
diag(W)=0
W=W/sum(W)
Y=(Z-mean(Z))/(sd(Z)*sqrt((n-1)/n))
t(Y) %*% (D-W) %*% Y
t(Y) %*% (D-W) %*% Y / (2*sum(W))
D-W
t(Y) %*% (D-W) %*% Y / (2*sum(D-W))
t(Y) %*% (D-W) %*% Y / (sum(D-W))
##############################
#5e JDD pour le projet
dfE=read.csv("Projet/MontpellierE.csv")
summary(dfE)
plot(dfE$Long,dfE$Lat,main="MontpellierE")
df=dfE
DD=dist(cbind(df$Long,df$Lat))
par(mfrow=c(1,3))
N=dim(df)[1];N
length(DD)
#2. Transformez votre vecteur distances en matrice M.
M=as.matrix(DD,nrow(df),nrow(df))
image(M,main="Image of M")
hist(DD)
# 3. Fixez un seuil ( prendre au debut le quantile a 2.5 %. Mettez le resultat
#dans une matrice W. Affectez 0 a la diagonale
rayon=quantile(DD,0.05)
image(M<rayon,main="Image of M<rayon")
W=M<rayon
diag(W)=0
#4. Transformez votre matrice M en W qui somme a 1.
W=W/sum(W);sum(W)
NV=10 #nombre de voisins fixé
#mettre 1 sur les NV plus petites distances
#0 sur les autres
N=dim(M)[1];N
NV=10
#ici dim(M)[1]=dim(M)[2]
for (i in 1:dim(M)[2]){
V=M[i,]
M[i,order(V)[1:NV]]=1
M[i,order(V)[(NV+1):N]]=0
}
apply(M,1,sum)
par(mfrow=c(1,1))
image(M<rayon,main="Image of M<rayon")
W=M<rayon
diag(W)=0
for (i in 1:N){
W[i,]=W[i,]/sum(W[i,])
}
apply(W,1,sum)
plot(table(apply(W,1,sum)))
##########################
#4. Transformez votre matrice M en W qui somme a 1.
W=W/sum(W);sum(W)
Z=df$LDEN;head(Z)
#En revenant à la formule théorique
n=dim(W)[1];n
Y=(Z-mean(Z))/(sd(Z)*sqrt((n-1)/n));Y
I = t(Y) %*% W %*% Y;I
Moran = function(X,Y,Z,ray){
n=length(Z)
DD=dist(cbind(X,Y))
M=as.matrix(DD,n,n)
rayon=quantile(DD,ray)
W=M<rayon
diag(W)=0
W=W/sum(W)
Y=(Z-mean(Z))/(sd(Z)*sqrt((n-1)/n))
t(Y) %*% W %*% Y
}
Moran(df$Long,df$Lat,df$LDEN,ray=0.05)
library(ape)
Moran.I(df$LDEN,W)
Geary = function(X,Y,Z,ray){
n=length(Z)
DD=dist(cbind(X,Y))
M=as.matrix(DD,n,n)
rayon=quantile(DD,ray)
W=M<rayon
D=matrix(rep(0,n*n),n,n)
diag(D)=apply(W,1,sum)
diag(W)=0
W=W/sum(W)
Y=(Z-mean(Z))/(sd(Z)*sqrt((n-1)/n))
t(Y) %*% (D-W) %*% Y / sum(D-W)
}
Geary(df$Long,df$Lat,df$LDEN,ray=0.05)
plot(x = noKills, y = pOGaze(noKills), xlab="Number of kills", ylab="Odds",
main="Odds of finding a kill with O. Gaze/F. Mending VS naturally drawing one")
#Probability of drawing at least one (more than 0) of the 4 expected cards
#among 4+56=60 cards when you draw 7 cards
1-phyper(0,m=4,n=56,k=7)
#0.3939868
1-phyper(0,m=3,n=57,k=7)
#0.3154296
#Famous results above you can check on:
# https://stattrek.com/online-calculator/hypergeometric.aspx
#Odds of finding at least one kill with Otherwordly Gaze
#Looks at 3 cards out of 60
#(technically less since at least 7 were already drawn)
t=5 #the number of kills to vary
1-phyper(0,m=t,n=60-t,k=3)
t=8 #the number of kills to vary
1-phyper(0,m=t,n=60-t,k=3)
t=13 #the number of kills to vary
1-phyper(0,m=t,n=60-t,k=3)
pOGaze=function(t){
1-phyper(0,m=t,n=60-t,k=3)
}
pOGaze(5)
#Odds of finding at least one kill with Faithful Mending
#Looks at 2 cards out of 60
#(technically less since at least 7+1 were already drawn on t2)
t=5 #the number of kills to vary
1-phyper(0,m=t,n=60-t,k=2)
t=8 #the number of kills to vary
1-phyper(0,m=t,n=60-t,k=2)
t=13#the number of kills to vary
1-phyper(0,m=t,n=60-t,k=2)
pFMending=function(t){
1-phyper(0,m=t,n=60-t,k=2)
}
pFMending(5)
#We can confirm that the odds are increasing when we increase the number of kills.
#Now we want to reduce the odds of naturally drawing one of them, so we don't
#take the opposite probability anymore, so that it decreases over time
t=5 #the number of kills to vary
phyper(0,m=t,n=60-t,k=1)
t=8 #the number of kills to vary
phyper(0,m=t,n=60-t,k=1)
t=13#the number of kills to vary
phyper(0,m=t,n=60-t,k=1)
pNDraw=function(t){
phyper(0,m=t,n=60-t,k=1)
}
pNDraw(5)
#Those odds do decrease: they are the odds of drawing 0 kill during a draw.
#Now let us plot the evolution of those three odds.
noKills=seq(from=1,to=20,by=1);noKills
plot(x = noKills, y = pOGaze(noKills), xlab="Number of kills", ylab="Odds",
main="Odds of finding a kill with O. Gaze/F. Mending VS naturally drawing one")
plot(x = noKills, y = pOGaze(noKills), xlab="Number of kills", ylab="Odds",
main="Odds of finding a kill with O. Gaze/F. Mending\n VS naturally drawing one")
plot(x = noKills, y = pOGaze(noKills), col="blue" xlab="Number of kills", ylab="Odds",
main="Odds of finding a kill with O. Gaze/F. Mending\n VS naturally drawing one")
plot(x = noKills, y = pOGaze(noKills), col="blue", xlab="Number of kills", ylab="Odds",
main="Odds of finding a kill with O. Gaze/F. Mending\n VS naturally drawing one")
?plot
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,21),ylim=c(0,1),
main="Odds of finding a kill with O. Gaze/F. Mending\n VS naturally drawing one")
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,21),ylim=c(0,1), type="b",
main="Odds of finding a kill with O. Gaze/F. Mending\n VS naturally drawing one")
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,21),ylim=c(0,1), type="l",
main="Odds of finding a kill with O. Gaze/F. Mending\n VS naturally drawing one")
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,21),ylim=c(0,1), type="b",
main="Odds of finding a kill with O. Gaze/F. Mending\n VS naturally drawing one")
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,21),ylim=c(0,1), type="o",
main="Odds of finding a kill with O. Gaze/F. Mending\n VS naturally drawing one")
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,21),ylim=c(0,1), type="c",
main="Odds of finding a kill with O. Gaze/F. Mending\n VS naturally drawing one")
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,21),ylim=c(0,1), type="o",
main="Odds of finding a kill with O. Gaze/F. Mending\n VS naturally drawing one")
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,21),ylim=c(0,1), type="o",
main="Odds of finding a kill with O. Gaze/F. Mending
VS naturally drawing one")
lines(x = noKills, y = pFMending(noKills), col="gold")
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,21),ylim=c(0,1), type="o",
main="Odds of finding a kill with O. Gaze/F. Mending
VS naturally drawing one")
lines(x = noKills, y = pFMending(noKills), col="gold",type="o")
lines(x = noKills, y = pNDraw(noKills), col="red",type="o")
noKills=seq(from=1,to=30,by=1);noKills
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,31),ylim=c(0,1), type="o",
main="Odds of finding a kill with O. Gaze/F. Mending
VS naturally drawing one")
lines(x = noKills, y = pFMending(noKills), col="gold",type="o")
lines(x = noKills, y = pNDraw(noKills), col="red",type="o")
?legend
plot(table(apply(W,1,sum)))
##########################
#4. Transformez votre matrice M en W qui somme a 1.
W=W/sum(W);sum(W)
Z=df$LDEN;head(Z)
#En revenant à la formule théorique
n=dim(W)[1];n
Y=(Z-mean(Z))/(sd(Z)*sqrt((n-1)/n));Y
I = t(Y) %*% W %*% Y;I
Moran = function(X,Y,Z,ray){
n=length(Z)
DD=dist(cbind(X,Y))
M=as.matrix(DD,n,n)
rayon=quantile(DD,ray)
W=M<rayon
diag(W)=0
W=W/sum(W)
Y=(Z-mean(Z))/(sd(Z)*sqrt((n-1)/n))
t(Y) %*% W %*% Y
}
Moran(df$Long,df$Lat,df$LDEN,ray=0.05)
library(ape)
Moran.I(df$LDEN,W)
Geary = function(X,Y,Z,ray){
n=length(Z)
DD=dist(cbind(X,Y))
M=as.matrix(DD,n,n)
rayon=quantile(DD,ray)
W=M<rayon
D=matrix(rep(0,n*n),n,n)
diag(D)=apply(W,1,sum)
diag(W)=0
W=W/sum(W)
Y=(Z-mean(Z))/(sd(Z)*sqrt((n-1)/n))
t(Y) %*% (D-W) %*% Y / sum(D-W)
}
Geary(df$Long,df$Lat,df$LDEN,ray=0.05)
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,31),ylim=c(0,1), type="o",
main="Odds of finding a kill with O. Gaze/F. Mending
VS naturally drawing one")
lines(x = noKills, y = pFMending(noKills), col="gold",type="o")
lines(x = noKills, y = pNDraw(noKills), col="red",type="o")
indiceMoran=function(W,Z){
n=dim(W)[1]
Z=(Z-mean(Z))/sd(Z)*sqrt((n-1)/n)
t(Z) %*% W %*% Z
}
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,31),ylim=c(0,1), type="o",
main="Odds of finding a kill with O. Gaze/F. Mending
VS naturally drawing one")
lines(x = noKills, y = pFMending(noKills), col="gold",type="o")
lines(x = noKills, y = pNDraw(noKills), col="red",type="o")
legend(x=17,y=0.3,legend=c("O. Gaze", "F. Mending", "Natural Draw"), bty = "o",
col=c("blue","gold","red"))
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,31),ylim=c(0,1), type="o",
main="Odds of finding a kill with O. Gaze/F. Mending
VS naturally drawing one")
lines(x = noKills, y = pFMending(noKills), col="gold",type="o")
lines(x = noKills, y = pNDraw(noKills), col="red",type="o")
legend(x=17,y=0.3,legend=c("O. Gaze", "F. Mending", "Natural Draw"),
col=c("blue","gold","red"))
legend(x=17,y=0.3,legend=c("O. Gaze", "F. Mending", "Natural Draw"),
col=c("blue","gold","red"),lty=1)
legend(x=15,y=0.3,legend=c("O. Gaze", "F. Mending", "Natural Draw"),
col=c("blue","gold","red"),lty=1)
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,31),ylim=c(0,1), type="o",
main="Odds of finding a kill with O. Gaze/F. Mending
VS naturally drawing one")
lines(x = noKills, y = pFMending(noKills), col="gold",type="o")
lines(x = noKills, y = pNDraw(noKills), col="red",type="o")
legend(x=15,y=0.3,legend=c("O. Gaze", "F. Mending", "Natural Draw"),
col=c("blue","gold","red"),lty=1)
plot(x = noKills, y = pOGaze(noKills), col="blue",
xlab="Number of kills", ylab="Odds",
xlim=c(0,31),ylim=c(0,1), type="o",
main="Odds of finding a kill with O. Gaze/F. Mending
VS not naturally drawing one")
lines(x = noKills, y = pFMending(noKills), col="gold",type="o")
lines(x = noKills, y = pNDraw(noKills), col="red",type="o")
legend(x=15,y=0.3,legend=c("O. Gaze", "F. Mending", "Natural Draw"),
col=c("blue","gold","red"),lty=1)
indiceMoran=function(W,Z){
n=dim(W)[1]
Z=(Z-mean(Z))/sd(Z)*sqrt((n-1)/n)
t(Z) %*% W %*% Z
}
#Permutations
resuMoran=NULL
for (k in 1:1000){
dfP=sample(df$LDEN)
resuMoran=c(resu,indiceMoran(W,dfP))
}
resu=NULL
#1. Faites au depart 10 permutations puis si cela fonctionne 1000.
for (k in 1:1000){
dfP=sample(df$LDEN)
resu=c(resu,Moran(df$Long,df$Lat,df$LDEN,ray=0.05))
}
# 2. Representez par un histogramme l'ensemble des calculs stockes dans Resu.
hist(resu)
indiceMoran=function(W,Z){
n=dim(W)[1]
Z=(Z-mean(Z))/sd(Z)*sqrt((n-1)/n)
t(Z) %*% W %*% Z
}
#Permutations
resuMoran=NULL
indiceMoran=function(W,Z){
n=dim(W)[1]
Z=(Z-mean(Z))/sd(Z)*sqrt((n-1)/n)
t(Z) %*% W %*% Z
}
#Permutations
resuMoran=NULL
for (k in 1:1000){
dfP=sample(df$LDEN)
resuMoran=c(resuMoran,indiceMoran(W,dfP))
}
hist(resuMoran)
indiceGeary=function(Y,W,N){
t(Y)*(N-W)*Y/(t(Y)*N*Y)
}
#Permutations
resuGeary=NULL
NN=diag(W)/(1/N)
for (k in 1:1000){
NO2P=sample(df$LDEN)
resuGeary=c(resuGeary,indiceGeary(df$Lat,W,NN))
}
file = "Projet/PointSup.csv"
supp = read.csv(file, header = T, sep = ",")
file = "Interpolation/PointSup.csv"
supp = read.csv(file, header = T, sep = ",")
supp$layer=NULL
supp$path=NULL
file = "Interpolation/PointSup.csv"
supp = read.csv(file, header = T, sep = ",")
supp$layer=NULL
supp$path=NULL
# Pour des besoins de calculs: pour chaque carr? on fait la moyenne des coordonn?es
B1 = mean(supp$X); B2 = mean(supp$Y);B1;B2
names(supp)
# Pour des besoins de calculs: pour chaque carr? on fait la moyenne des coordonn?es
B1 = mean(supp$CoordX); B2 = mean(supp$CoordY);B1;B2
cond = (supp$CoordX < B1) & (supp$CoordY <B2):cond
cond = (supp$CoordX < B1) & (supp$CoordY <B2);cond
file = "Interpolation/PointSup.csv"
df = read.csv(file, header = T, sep = ",")
df$layer=NULL
df$path=NULL
names(df)
#To be updated based on the data names
coordNames=c("CoordX","CoordY")
names(df)[names(df) == coordNames[1]] <- 'X'
names(df)[names(df) == coordNames[2]] <- 'Y'
# Pour des besoins de calculs: pour chaque carr? on fait la moyenne des coordonn?es
B1 = mean(df$X); B2 = mean(df$Y);B1;B2
cond = (df$X < B1) & (df$Y <B2);cond
file = "Interpolation/OUTPUT_Interpole_IDW_high_def.csv"
df = read.csv(file, header = T, sep = ",")
df$layer=NULL
df$path=NULL
names(df)
file = "Interpolation/OUTPUT_Interpole_IDW_high_def.csv"
df = read.csv(file, header = T, sep = ",")
names(df)=c("X","Y","DB")
df$layer=NULL
df$path=NULL
file = "Interpolation/OUTPUT_Interpole_IDW_high_def.csv"
df = read.csv(file, header = T, sep = " ")
names(df)=c("X","Y","DB")
df$layer=NULL
df$path=NULL
Cond=df$X<quantile(df$X,0.25) & df$Y<quantile(df$Y,0.25)
IDWQ1=df[Cond,1:2]
file = "Interpolation/PointSup.csv"
df2 = read.csv(file, header = T, sep = ",")
df2$layer=NULL
df2$path=NULL
file2 = "Interpolation/PointSup.csv"
df2 = read.csv(file2, header = T, sep = ",")
df2$layer=NULL
df2$path=NULL
names(df2)
#To be updated based on the data names
coordNames=c("CoordX","CoordY")
names(df2)[names(df2) == coordNames[1]] <- 'X'
names(df2)[names(df2) == coordNames[2]] <- 'Y'
Cond2=df2$X<quantile(df$X,0.25) & df2$Y<quantile(df$Y,0.25)
Cond2=df2$X<quantile(df2$X,0.25) & df2$Y<quantile(df2$Y,0.25)
PtSupQ1=df2[Cond2,3:4]
names(PtSupQ1)=c("X","Y")
DD=as.matrix(dist(rbind(IDWQ1,PtSupQ1)))
image(DD)
plot(IDWQ1$X,IDWQ1$Y,col=2,pch="+")
points(PtSupQ1$X,PtSupQ1$Y,col="green",pch="+")
plot(IDWQ1$X,IDWQ1$Y,col=2,pch="+")
points(PtSupQ1$X,PtSupQ1$Y,col="blue",pch="+")
install.packages("sp")
install.packages("sf")
install.packages("gstat")
Bruit = read.csv(file3, header = T, sep = ",")
file3 = "Projet/MontpellierE.csv"
Bruit = read.csv(file3, header = T, sep = ",")
summary(Bruit)
hist(Bruit$LDEN)
var(Bruit$LDEN)
coordinates(Bruit)=c("CoordX","CoordY")
library(sp)
coordinates(Bruit)=c("CoordX","CoordY")
DBM=(1.2)^Bruit$LDEN
library(sp)
BruitM=as.data.frame(cbind(Bruit,DBM))
coordinates(Bruit)=c("CoordX","CoordY")
coordinates(BruitM)=c("CoordX","CoordY")
BruitM=as.data.frame(cbind(Bruit,DBM))
coordinates(Bruit)=c("Long","Lat")
coordinates(BruitM)=c("Long","Lat")
bubble(Bruit,"LDEN")
MonVarioExp=variogram(LDEN~1,Bruit)
library(gstat)
MonVarioExp=variogram(LDEN~1,Bruit)
MonVarioExp=variogram(LDEN~1,BruitM,alpha=(c0,45,90,135))
MonVarioExp=variogram(LDEN~1,BruitM,alpha=c(0,45,90,135))
plot(MonVarioExp)
vgmX=fit.variogram(MonVarioExp,vgm("Sph"))
geoX=gstat(formula = LDEN~1,locations=BruitM,model = vgmX)
plot(geoX)
var(Bruit$LDEN)
VariModel=vgm(psill=var(Bruit$LDEN),model="Sph",range=20)
plot(MonVarioExp,VariModel,plot.numbers=T)
VariModel=vgm(psill=var(Bruit$LDEN),model="Sph",range=0.03,nugget = 20)
plot(MonVarioExp,VariModel,plot.numbers=T)
MonVarioExp=variogram(LDEN~1,Bruit)
VariModel=vgm(psill=var(Bruit$LDEN),model="Sph",range=0.03,nugget = 20)
plot(MonVarioExp,VariModel,plot.numbers=T)
